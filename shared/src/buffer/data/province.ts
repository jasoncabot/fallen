// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Vec2 } from '../../buffer/common/vec2';
import { ProvinceKey } from '../../buffer/data/province-key';
import { TerrainType } from '../../buffer/data/terrain-type';
import { TileMap } from '../../buffer/map/tile-map';


export class Province {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Province {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsProvince(bb:flatbuffers.ByteBuffer, obj?:Province):Province {
  return (obj || new Province()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsProvince(bb:flatbuffers.ByteBuffer, obj?:Province):Province {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Province()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

key():ProvinceKey {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ProvinceKey.Aberdeen;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

pos(obj?:Vec2):Vec2|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Vec2()).__init(this.bb_pos + offset, this.bb!) : null;
}

iconPos(obj?:Vec2):Vec2|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Vec2()).__init(this.bb_pos + offset, this.bb!) : null;
}

width():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

height():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

type():TerrainType {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : TerrainType.Desert;
}

energy():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

credits():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

research():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

touching(index: number):ProvinceKey|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

touchingLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

touchingArray():Int8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? new Int8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

tiles(obj?:TileMap):TileMap|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? (obj || new TileMap()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startProvince(builder:flatbuffers.Builder) {
  builder.startObject(12);
}

static addKey(builder:flatbuffers.Builder, key:ProvinceKey) {
  builder.addFieldInt8(0, key, ProvinceKey.Aberdeen);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static addPos(builder:flatbuffers.Builder, posOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, posOffset, 0);
}

static addIconPos(builder:flatbuffers.Builder, iconPosOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, iconPosOffset, 0);
}

static addWidth(builder:flatbuffers.Builder, width:number) {
  builder.addFieldInt8(4, width, 0);
}

static addHeight(builder:flatbuffers.Builder, height:number) {
  builder.addFieldInt8(5, height, 0);
}

static addType(builder:flatbuffers.Builder, type:TerrainType) {
  builder.addFieldInt8(6, type, TerrainType.Desert);
}

static addEnergy(builder:flatbuffers.Builder, energy:number) {
  builder.addFieldInt16(7, energy, 0);
}

static addCredits(builder:flatbuffers.Builder, credits:number) {
  builder.addFieldInt16(8, credits, 0);
}

static addResearch(builder:flatbuffers.Builder, research:number) {
  builder.addFieldInt16(9, research, 0);
}

static addTouching(builder:flatbuffers.Builder, touchingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, touchingOffset, 0);
}

static createTouchingVector(builder:flatbuffers.Builder, data:ProvinceKey[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startTouchingVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addTiles(builder:flatbuffers.Builder, tilesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, tilesOffset, 0);
}

static endProvince(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
