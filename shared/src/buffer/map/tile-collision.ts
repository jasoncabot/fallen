// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class TileCollision {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):TileCollision {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTileCollision(bb:flatbuffers.ByteBuffer, obj?:TileCollision):TileCollision {
  return (obj || new TileCollision()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTileCollision(bb:flatbuffers.ByteBuffer, obj?:TileCollision):TileCollision {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TileCollision()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

index():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

direction():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

static startTileCollision(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addIndex(builder:flatbuffers.Builder, index:number) {
  builder.addFieldInt16(0, index, 0);
}

static addDirection(builder:flatbuffers.Builder, direction:number) {
  builder.addFieldInt8(1, direction, 0);
}

static endTileCollision(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTileCollision(builder:flatbuffers.Builder, index:number, direction:number):flatbuffers.Offset {
  TileCollision.startTileCollision(builder);
  TileCollision.addIndex(builder, index);
  TileCollision.addDirection(builder, direction);
  return TileCollision.endTileCollision(builder);
}
}
